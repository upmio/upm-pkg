/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// UnitSpecApplyConfiguration represents an declarative configuration of the UnitSpec type for use
// with apply.
type UnitSpecApplyConfiguration struct {
	Secret            *string                              `json:"secret,omitempty"`
	MainContainerName *string                              `json:"mainContainerName,omitempty"`
	MainImageVersion  *string                              `json:"mainImageVersion,omitempty"`
	UnService         *bool                                `json:"unService,omitempty"`
	UnBindNode        *bool                                `json:"unBindNode,omitempty"`
	Template          *v1.PodTemplateSpec                  `json:"template,omitempty"`
	ConfigSource      []ConfigSourceApplyConfiguration     `json:"config_source,omitempty"`
	Networking        *NetworkingRequestApplyConfiguration `json:"networking,omitempty"`
	VolumeClaims      []PVCRequestApplyConfiguration       `json:"claims,omitempty"`
	Action            *ActionApplyConfiguration            `json:"action,omitempty"`
}

// UnitSpecApplyConfiguration constructs an declarative configuration of the UnitSpec type for use with
// apply.
func UnitSpec() *UnitSpecApplyConfiguration {
	return &UnitSpecApplyConfiguration{}
}

// WithSecret sets the Secret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Secret field is set to the value of the last call.
func (b *UnitSpecApplyConfiguration) WithSecret(value string) *UnitSpecApplyConfiguration {
	b.Secret = &value
	return b
}

// WithMainContainerName sets the MainContainerName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MainContainerName field is set to the value of the last call.
func (b *UnitSpecApplyConfiguration) WithMainContainerName(value string) *UnitSpecApplyConfiguration {
	b.MainContainerName = &value
	return b
}

// WithMainImageVersion sets the MainImageVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MainImageVersion field is set to the value of the last call.
func (b *UnitSpecApplyConfiguration) WithMainImageVersion(value string) *UnitSpecApplyConfiguration {
	b.MainImageVersion = &value
	return b
}

// WithUnService sets the UnService field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UnService field is set to the value of the last call.
func (b *UnitSpecApplyConfiguration) WithUnService(value bool) *UnitSpecApplyConfiguration {
	b.UnService = &value
	return b
}

// WithUnBindNode sets the UnBindNode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UnBindNode field is set to the value of the last call.
func (b *UnitSpecApplyConfiguration) WithUnBindNode(value bool) *UnitSpecApplyConfiguration {
	b.UnBindNode = &value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *UnitSpecApplyConfiguration) WithTemplate(value v1.PodTemplateSpec) *UnitSpecApplyConfiguration {
	b.Template = &value
	return b
}

// WithConfigSource adds the given value to the ConfigSource field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ConfigSource field.
func (b *UnitSpecApplyConfiguration) WithConfigSource(values ...*ConfigSourceApplyConfiguration) *UnitSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConfigSource")
		}
		b.ConfigSource = append(b.ConfigSource, *values[i])
	}
	return b
}

// WithNetworking sets the Networking field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Networking field is set to the value of the last call.
func (b *UnitSpecApplyConfiguration) WithNetworking(value *NetworkingRequestApplyConfiguration) *UnitSpecApplyConfiguration {
	b.Networking = value
	return b
}

// WithVolumeClaims adds the given value to the VolumeClaims field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VolumeClaims field.
func (b *UnitSpecApplyConfiguration) WithVolumeClaims(values ...*PVCRequestApplyConfiguration) *UnitSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVolumeClaims")
		}
		b.VolumeClaims = append(b.VolumeClaims, *values[i])
	}
	return b
}

// WithAction sets the Action field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Action field is set to the value of the last call.
func (b *UnitSpecApplyConfiguration) WithAction(value *ActionApplyConfiguration) *UnitSpecApplyConfiguration {
	b.Action = value
	return b
}
