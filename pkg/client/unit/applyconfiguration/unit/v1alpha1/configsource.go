/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ConfigSourceApplyConfiguration represents an declarative configuration of the ConfigSource type for use
// with apply.
type ConfigSourceApplyConfiguration struct {
	Type                 *string `json:"type,omitempty"`
	Namespace            *string `json:"namespace,omitempty"`
	ConfigmapName        *string `json:"configmap_name,omitempty"`
	DefaultMode          *string `json:"default_mode,omitempty"`
	VolumemountMountpath *string `json:"volumemount_mountpath,omitempty"`
	VolumeName           *string `json:"volume_name,omitempty"`
}

// ConfigSourceApplyConfiguration constructs an declarative configuration of the ConfigSource type for use with
// apply.
func ConfigSource() *ConfigSourceApplyConfiguration {
	return &ConfigSourceApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ConfigSourceApplyConfiguration) WithType(value string) *ConfigSourceApplyConfiguration {
	b.Type = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *ConfigSourceApplyConfiguration) WithNamespace(value string) *ConfigSourceApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithConfigmapName sets the ConfigmapName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigmapName field is set to the value of the last call.
func (b *ConfigSourceApplyConfiguration) WithConfigmapName(value string) *ConfigSourceApplyConfiguration {
	b.ConfigmapName = &value
	return b
}

// WithDefaultMode sets the DefaultMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefaultMode field is set to the value of the last call.
func (b *ConfigSourceApplyConfiguration) WithDefaultMode(value string) *ConfigSourceApplyConfiguration {
	b.DefaultMode = &value
	return b
}

// WithVolumemountMountpath sets the VolumemountMountpath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumemountMountpath field is set to the value of the last call.
func (b *ConfigSourceApplyConfiguration) WithVolumemountMountpath(value string) *ConfigSourceApplyConfiguration {
	b.VolumemountMountpath = &value
	return b
}

// WithVolumeName sets the VolumeName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeName field is set to the value of the last call.
func (b *ConfigSourceApplyConfiguration) WithVolumeName(value string) *ConfigSourceApplyConfiguration {
	b.VolumeName = &value
	return b
}
