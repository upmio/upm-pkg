/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// UnitTemplateApplyConfiguration represents an declarative configuration of the UnitTemplate type for use
// with apply.
type UnitTemplateApplyConfiguration struct {
	Metadata              *UnitMetadataApplyConfiguration   `json:"metadata,omitempty"`
	UnbindNode            *bool                             `json:"unbindNode,omitempty"`
	Env                   []v1.EnvVar                       `json:"env,omitempty"`
	Resource              *v1.ResourceRequirements          `json:"resource,omitempty"`
	Volumes               []v1.Volume                       `json:"volumes,omitempty"`
	VolumeMounts          []v1.VolumeMount                  `json:"volumeMounts,omitempty"`
	Affinity              *v1.Affinity                      `json:"affinity,omitempty"`
	Ports                 []ContainerPortApplyConfiguration `json:"ports,omitempty"`
	ShareProcessNamespace *bool                             `json:"shareProcessNamespace,omitempty"`
	ServiceAccount        *string                           `json:"serviceAccount,omitempty"`
}

// UnitTemplateApplyConfiguration constructs an declarative configuration of the UnitTemplate type for use with
// apply.
func UnitTemplate() *UnitTemplateApplyConfiguration {
	return &UnitTemplateApplyConfiguration{}
}

// WithMetadata sets the Metadata field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Metadata field is set to the value of the last call.
func (b *UnitTemplateApplyConfiguration) WithMetadata(value *UnitMetadataApplyConfiguration) *UnitTemplateApplyConfiguration {
	b.Metadata = value
	return b
}

// WithUnbindNode sets the UnbindNode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UnbindNode field is set to the value of the last call.
func (b *UnitTemplateApplyConfiguration) WithUnbindNode(value bool) *UnitTemplateApplyConfiguration {
	b.UnbindNode = &value
	return b
}

// WithEnv adds the given value to the Env field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Env field.
func (b *UnitTemplateApplyConfiguration) WithEnv(values ...v1.EnvVar) *UnitTemplateApplyConfiguration {
	for i := range values {
		b.Env = append(b.Env, values[i])
	}
	return b
}

// WithResource sets the Resource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resource field is set to the value of the last call.
func (b *UnitTemplateApplyConfiguration) WithResource(value v1.ResourceRequirements) *UnitTemplateApplyConfiguration {
	b.Resource = &value
	return b
}

// WithVolumes adds the given value to the Volumes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Volumes field.
func (b *UnitTemplateApplyConfiguration) WithVolumes(values ...v1.Volume) *UnitTemplateApplyConfiguration {
	for i := range values {
		b.Volumes = append(b.Volumes, values[i])
	}
	return b
}

// WithVolumeMounts adds the given value to the VolumeMounts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VolumeMounts field.
func (b *UnitTemplateApplyConfiguration) WithVolumeMounts(values ...v1.VolumeMount) *UnitTemplateApplyConfiguration {
	for i := range values {
		b.VolumeMounts = append(b.VolumeMounts, values[i])
	}
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *UnitTemplateApplyConfiguration) WithAffinity(value v1.Affinity) *UnitTemplateApplyConfiguration {
	b.Affinity = &value
	return b
}

// WithPorts adds the given value to the Ports field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Ports field.
func (b *UnitTemplateApplyConfiguration) WithPorts(values ...*ContainerPortApplyConfiguration) *UnitTemplateApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPorts")
		}
		b.Ports = append(b.Ports, *values[i])
	}
	return b
}

// WithShareProcessNamespace sets the ShareProcessNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ShareProcessNamespace field is set to the value of the last call.
func (b *UnitTemplateApplyConfiguration) WithShareProcessNamespace(value bool) *UnitTemplateApplyConfiguration {
	b.ShareProcessNamespace = &value
	return b
}

// WithServiceAccount sets the ServiceAccount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccount field is set to the value of the last call.
func (b *UnitTemplateApplyConfiguration) WithServiceAccount(value string) *UnitTemplateApplyConfiguration {
	b.ServiceAccount = &value
	return b
}
