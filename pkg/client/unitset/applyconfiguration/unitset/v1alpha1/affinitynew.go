/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// AffinityNewApplyConfiguration represents an declarative configuration of the AffinityNew type for use
// with apply.
type AffinityNewApplyConfiguration struct {
	Required  map[string][]string `json:"required,omitempty"`
	Preferred map[string][]string `json:"preferred,omitempty"`
}

// AffinityNewApplyConfiguration constructs an declarative configuration of the AffinityNew type for use with
// apply.
func AffinityNew() *AffinityNewApplyConfiguration {
	return &AffinityNewApplyConfiguration{}
}

// WithRequired puts the entries into the Required field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Required field,
// overwriting an existing map entries in Required field with the same key.
func (b *AffinityNewApplyConfiguration) WithRequired(entries map[string][]string) *AffinityNewApplyConfiguration {
	if b.Required == nil && len(entries) > 0 {
		b.Required = make(map[string][]string, len(entries))
	}
	for k, v := range entries {
		b.Required[k] = v
	}
	return b
}

// WithPreferred puts the entries into the Preferred field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Preferred field,
// overwriting an existing map entries in Preferred field with the same key.
func (b *AffinityNewApplyConfiguration) WithPreferred(entries map[string][]string) *AffinityNewApplyConfiguration {
	if b.Preferred == nil && len(entries) > 0 {
		b.Preferred = make(map[string][]string, len(entries))
	}
	for k, v := range entries {
		b.Preferred[k] = v
	}
	return b
}
