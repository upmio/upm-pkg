/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "upm-pkg/pkg/apis/unitset/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UnitsetLister helps list Unitsets.
// All objects returned here must be treated as read-only.
type UnitsetLister interface {
	// List lists all Unitsets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Unitset, err error)
	// Unitsets returns an object that can list and get Unitsets.
	Unitsets(namespace string) UnitsetNamespaceLister
	UnitsetListerExpansion
}

// unitsetLister implements the UnitsetLister interface.
type unitsetLister struct {
	indexer cache.Indexer
}

// NewUnitsetLister returns a new UnitsetLister.
func NewUnitsetLister(indexer cache.Indexer) UnitsetLister {
	return &unitsetLister{indexer: indexer}
}

// List lists all Unitsets in the indexer.
func (s *unitsetLister) List(selector labels.Selector) (ret []*v1alpha1.Unitset, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Unitset))
	})
	return ret, err
}

// Unitsets returns an object that can list and get Unitsets.
func (s *unitsetLister) Unitsets(namespace string) UnitsetNamespaceLister {
	return unitsetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UnitsetNamespaceLister helps list and get Unitsets.
// All objects returned here must be treated as read-only.
type UnitsetNamespaceLister interface {
	// List lists all Unitsets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Unitset, err error)
	// Get retrieves the Unitset from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Unitset, error)
	UnitsetNamespaceListerExpansion
}

// unitsetNamespaceLister implements the UnitsetNamespaceLister
// interface.
type unitsetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Unitsets in the indexer for a given namespace.
func (s unitsetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Unitset, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Unitset))
	})
	return ret, err
}

// Get retrieves the Unitset from the indexer for a given namespace and name.
func (s unitsetNamespaceLister) Get(name string) (*v1alpha1.Unitset, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("unitset"), name)
	}
	return obj.(*v1alpha1.Unitset), nil
}
